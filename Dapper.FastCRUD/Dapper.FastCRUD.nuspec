<?xml version="1.0"?>
<package >
  <metadata>
    <id>$id$</id>
    <version>$version$-beta2</version>
    <title>$title$</title>
    <authors>$author$</authors>
    <owners>$author$</owners>
    <licenseUrl>http://opensource.org/licenses/MIT</licenseUrl>
    <projectUrl>https://github.com/MoonStorm/Dapper.FastCRUD</projectUrl>
    <iconUrl>https://raw.githubusercontent.com/MoonStorm/Dapper.FastCRUD/master/Dapper.FastCRUD/logo.png</iconUrl>
    <requireLicenseAcceptance>false</requireLicenseAcceptance>
    <!--<description>$description$</description>-->
    <summary>The fastest micro-orm type extension for Dapper.</summary>
    <description>
The fastest micro-orm type extension for Dapper.

For Dapper constructs in general, it is recommended to use Visual Studio 2015 for features such as nameof and string interpolation, but that's not a requirement.

The package contains .NET 4.5 and 4.6 DLLs, one of which will be installed based on the target framework in your project. 
For .NET 4.5, the code contains the polyfills for the missing FormattableString class, which is required when targetting that framework version and using string interpolation with the C# 6 compiler in VS 2015.

Features:
----------
- Support for LocalDb, Ms Sql Server, MySql, SqLite, PostgreSql
- Entities having composite primary keys are supported
- Multiple entity mappings are supported.
- All the CRUD methods accept a transaction, a command timeout, and a custom entity mapping.
- Fast pre-computed entity queries
- A simple Sql builder with alias support is provided, which is very useful when manual SQL queries are unavoidable.
- A generic T4 template is also provided for convenience. Entity domain partitioning and generation can be achieved via separate template configurations.
The installation package includes a sample config file SampleModelGeneratorConfig.tt which you can rename and tweak at will. 
Code first entities are also supported which can either be decorated with attributes such as Table, Key and DatabaseGenerated, or can have their mappings programmatically set.

Examples of usage:
-------------------
- using Dapper.FastCrud
- dbConnection.Insert(newEntity);
- dbConnection.Get()
- dbConnection.Get(new Entity() {Id = 10});
- dbConnection.Update(updatedEntity);
- dbConnection.Delete(entity)
- dbConnection.Find&lt;Entity&gt;(
      whereClause:$"{nameof(Entity.FirstName)}=@FirstNameParam",
      orderClause:$"{nameof(Entity.LastName)} DESC",
      skipRowsCount:10, limitRowsCount:20,
      queryParameters: new {FirstNameParam: "John"});

This is where the power of the C# 6 compiler comes into play, and leaves no chance to mistypings or to problems arising from db entity refactorings.
More details and benchmarks are available on the project site.
    </description>
    <releaseNotes>
Version 2.0 introduced the following breaking changes:
- All the extensions were moved to Dapper.FastCrud namespace to avoid clashes with other extensions.
- Configuration was moved to the static class OrmConfiguration.

The following enhancements were added in version 2.0:
- Runtime mappings for code first entities.
- Simultaneous multiple mappings per entity type.
- Rudimentary SQL builder with alias support.
    </releaseNotes>
    <copyright>Copyright 2015</copyright>
    <tags>dapper crud orm sql sqlite mysql mssql localdb postgresql poco</tags>
    <frameworkAssemblies>
      <frameworkAssembly assemblyName="System.ComponentModel.DataAnnotations"/>
    </frameworkAssemblies>
  </metadata>
  <files>
    <file src="bin\Release\v4.6\Dapper.FastCrud.Net46.dll" target="lib\net46" />
    <file src="bin\Release\v4.5\Dapper.FastCrud.dll" target="lib\net45" />
    <file src="Package\GenericModelGenerator.tt" target="Content\Models" />
    <file src="Package\SampleModelGeneratorConfig.tt" target="Content\Models" />
    <file src="Package\install.ps1" target="Tools" />
  </files>
</package>
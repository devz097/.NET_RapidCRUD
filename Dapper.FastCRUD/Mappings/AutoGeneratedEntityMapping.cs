namespace Dapper.FastCrud.Mappings
{
    using System;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.ComponentModel.DataAnnotations.Schema;
    using System.Linq;

    internal class AutoGeneratedEntityMapping:EntityMapping
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        public AutoGeneratedEntityMapping(Type entityType)
            : base(
                  entityType, 
                  TypeDescriptor.GetAttributes(entityType).OfType<TableAttribute>().SingleOrDefault()?.Name,
                  TypeDescriptor.GetAttributes(entityType).OfType<TableAttribute>().SingleOrDefault()?.Schema)
        {
            this.DiscoverPropertyMappings();
        }

        private static readonly Type[] SimpleSqlTypes = new[]
        {
            typeof (byte),
            typeof (sbyte),
            typeof (short),
            typeof (ushort),
            typeof (int),
            typeof (uint),
            typeof (long),
            typeof (ulong),
            typeof (float),
            typeof (double),
            typeof (decimal),
            typeof (bool),
            typeof (string),
            typeof (char),
            typeof (Guid),
            typeof (DateTime),
            typeof (DateTimeOffset),
            typeof (byte[])
        };

        private static bool IsSimpleSqlType(Type type)
        {
            var underlyingType = Nullable.GetUnderlyingType(type);
            type = underlyingType ?? type;
            return type.IsEnum || SimpleSqlTypes.Contains(type);
        }

        private void DiscoverPropertyMappings()
        {
            foreach (var property in TypeDescriptor.GetProperties(EntityType).OfType<PropertyDescriptor>())
            {
                if (IsSimpleSqlType(property.PropertyType) && property.Attributes.OfType<EditableAttribute>().All(editableAttr => editableAttr.AllowEdit))
                {
                    var propertyMappingOptions = PropertyMappingOptions.Regular;
                    if (property.Attributes.OfType<KeyAttribute>().Any())
                    {
                        propertyMappingOptions|=PropertyMappingOptions.KeyProperty;
                    }

                    if (
                        property.Attributes.OfType<DatabaseGeneratedAttribute>()
                                .Any(
                                    dbGenerated =>
                                    dbGenerated.DatabaseGeneratedOption == DatabaseGeneratedOption.Computed
                                    || dbGenerated.DatabaseGeneratedOption == DatabaseGeneratedOption.Identity))
                    {
                        propertyMappingOptions|=PropertyMappingOptions.DatabaseGeneratedProperty;
                    }

                    var databaseColumnName = property.Attributes.OfType<ColumnAttribute>().FirstOrDefault()?.Name;
                    this.PropertyMappings[property.Name] = new PropertyMapping(propertyMappingOptions,property,databaseColumnName);
                }
            }
        }

        // OBSOLETE
        //private void DiscoverProperties()
        //{
        //    this.SelectPropertyDescriptors =
        //        TypeDescriptor.GetProperties(entityType)
        //            .Cast<PropertyDescriptor>()
        //            .Where(
        //                p =>
        //                    IsSimpleSqlType(p.PropertyType)
        //                    && p.Attributes.OfType<EditableAttribute>().All(editableAttr => editableAttr.AllowEdit))
        //            .ToArray();
        //    this.KeyPropertyDescriptors = this.SelectPropertyDescriptors.Where(propInfo => propInfo.Attributes.OfType<KeyAttribute>().Any()).ToArray();
        //    this.TableDescriptor = TypeDescriptor.GetAttributes(entityType)
        //        .OfType<TableAttribute>().SingleOrDefault() ?? new TableAttribute(entityType.Name);
        //    this.DatabaseGeneratedIdentityPropertyDescriptors = this.SelectPropertyDescriptors
        //        .Where(propInfo => propInfo.Attributes.OfType<DatabaseGeneratedAttribute>()
        //        .Any(dbGenerated => dbGenerated.DatabaseGeneratedOption == DatabaseGeneratedOption.Identity))
        //        .ToArray();
        //    this.DatabaseGeneratedPropertyDescriptors = this.SelectPropertyDescriptors
        //        .Where(propInfo => propInfo.Attributes.OfType<DatabaseGeneratedAttribute>()
        //        .Any(dbGenerated => dbGenerated.DatabaseGeneratedOption == DatabaseGeneratedOption.Computed || dbGenerated.DatabaseGeneratedOption == DatabaseGeneratedOption.Identity))
        //        .ToArray();

        //    // everything can be updateable, with the exception of the primary keys
        //    this.UpdatePropertyDescriptors = this.SelectPropertyDescriptors.Except(this.KeyPropertyDescriptors).ToArray();

        //    // we consider properties that go into an insert only the ones that are not auto-generated 
        //    this.InsertPropertyDescriptors = this.SelectPropertyDescriptors.Except(this.DatabaseGeneratedPropertyDescriptors).ToArray();

        //}
    }
}

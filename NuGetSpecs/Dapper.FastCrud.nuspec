<?xml version="1.0"?>
<package >
  <metadata>
    <id>Dapper.FastCrud</id>
    <version>$version$</version>
    <title>Dapper.FastCrud</title>
    <authors>MoonStorm</authors>
    <owners>MoonStorm</owners>
    <licenseUrl>http://opensource.org/licenses/MIT</licenseUrl>
    <projectUrl>https://github.com/MoonStorm/Dapper.FastCRUD</projectUrl>
    <iconUrl>https://raw.githubusercontent.com/MoonStorm/Dapper.FastCRUD/master/logo.png</iconUrl>
    <requireLicenseAcceptance>false</requireLicenseAcceptance>
    <summary>The fastest micro-orm type extension for Dapper.</summary>
    <description>
The fastest micro-orm type extension for Dapper is built around essential features of the C# 6 /VB 14 that have finally raised the simplicity of raw SQL constructs to acceptable maintenance levels. 
These features leave no chance to mistypings or problems arising from db entity refactorings.

The package contains .NET 4.5 and 4.6 DLLs, one of which will be installed based on the target framework in your project.
There is no need to target .NET 4.6, but it is mandatory to use VS2015 or an equivalent build environment.
For .NET 4.5, the package will also install the dependency 'StringInterpolationBridge', which contains the polyfills required when using string interpolation with the C# 6 compiler in VS 2015.

Features:
----------
- Support for LocalDb, Ms Sql Server, MySql, SqLite, PostgreSql.
- Composite primary keys are supported.
- Compatible with most EF data annotations.
- Multiple entity mappings are supported, useful for partial queries in large denormalized tables and data migrations between different database types.
- All the CRUD methods accept a transaction, a command timeout, and a custom entity mapping.
- Fast pre-computed entity queries.
- A useful SQL builder and statement formatter which can be used even if you don't need the CRUD features of this library.
- A generic T4 template for C# is also provided for convenience in the NuGet package Dapper.FastCrud.ModelGenerator.
Code first entities are also supported which can either be decorated with attributes, have their mappings programmatically set, or using your own custom convention.

Check out the package on nuget.org for release notes. Usage and benchmarks can be found on the project site.
    </description>
    <releaseNotes>
2.3.2:
 - Duplicate delimiters avoided if an already delimited identifier was passed as an alias.
 - Fixed a memory leak caused by holding references to custom entity mapping overrides.
 
2.3.0:
- BREAKING CHANGE: the logic for properties marked with DatabaseGeneratedAttribute has changed. 
- BREAKING CHANGE: the fluent way of specifying database generated values for the columns, including default values, has changed. 
- BREAKING CHANGE: entities are being updated with the computed values on return from an UPDATE. 
- NotMappedAttribute is now supported. 
- DatabaseGeneratedDefaultValueAttribute was introduced to mark the properties bound to columns having default values that should be retrieved from the database. 
- More information about the breaking changes can be found on the project site.

2.2.x:
- BREAKING CHANGE: due to the large number of arguments, in some cases, a new definition was added for all the extension methods and the existing methods were marked as obsolete with some of them losing argument optionality.
- full support for table and column name overrides.
- SQL delimiters used throughout.
- PostgreSql delimiters enforced.
- default library conventions, easy to override if needed.
- default SQL statement options.
- enhanced SQL builder with a SQL formatter provider, with support for formatting specifiers for table (T), column (C) or table and column (TC).
- support for the MetadataType attribute.
- fixed the INSERT statement in an MsSql table with triggers.
- fixed SKIP and TOP clauses for MsSql and SqLite.
- added bulk update and delete.

2.1.x:
- fixed missing dependency on Dapper.
- .NET 4.5 polyfills for string interpolation were removed and a library dependency was added instead.
- async methods added.
- count method added.
- fix for database column name overrides.
- easier entity registration for code-first.

2.0.x:
- All the extensions were moved to Dapper.FastCrud namespace to avoid clashes with other extensions.
- Configuration was moved to the static class OrmConfiguration.
- The T4 template was moved into a different package.
- Runtime mappings for code first entities.
- Simultaneous multiple mappings per entity type.
- Rudimentary SQL builder with alias support.

1.1.x:
- Added support for MySql and SqLite. 
- Entities that have primary keys not auto-generated by the DB are now supported.
- Added support for PostgreSql dialect.

1.0.x:
- Updated T4 template for database generated fields and composite primary keys. 
- Better handling of database generated fields. 
- Added the data annotation assembly as reference on installation.
    </releaseNotes>
    <copyright>Copyright 2015</copyright>
    <tags>dapper crud orm sql sqlite mysql mssql localdb postgresql poco</tags>
    <frameworkAssemblies>
    </frameworkAssemblies>
    <dependencies>
      <group>
        <dependency id="Dapper" version="1.38" />
        <dependency id="StringInterpolationBridge" version="0.9.1"/>
      </group>
      <group targetFramework="net46">
        <dependency id="Dapper" version="1.38" />
      </group>
    </dependencies>
  </metadata>
  <files>
    <file src="..\Dapper.FastCRUD\bin\$configuration$\Dapper.FastCrud.Net46.dll" target="lib\net46" />
    <file src="..\Dapper.FastCRUD\bin\$configuration$\Dapper.FastCrud.Net46.xml" target="lib\net46" />
    <file src="..\Dapper.FastCRUD\bin\$configuration$\Dapper.FastCrud.dll" target="lib\net45" />
    <file src="..\Dapper.FastCRUD\bin\$configuration$\Dapper.FastCrud.xml" target="lib\net45" />
  </files>
</package>
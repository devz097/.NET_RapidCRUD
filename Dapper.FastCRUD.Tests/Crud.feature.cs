// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Dapper.FastCrud.Tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("CRUD tests")]
    public partial class CRUDTestsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Crud.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "CRUD tests", "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Insert and select all (in-memory database)")]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "employee", "1", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "workstation", "1", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("SqLite", "workstation", "1", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "building", "1", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("SqLite", "building", "1", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "employee", "1", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "workstation", "1", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("SqLite", "workstation", "1", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "building", "1", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("SqLite", "building", "1", "synchronous", null)]
        public virtual void InsertAndSelectAllIn_MemoryDatabase(string databaseType, string entityType, string entityCount, string methodType, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Insert and select all (in-memory database)", exampleTags);
#line 12
this.ScenarioSetup(scenarioInfo);
#line 13
 testRunner.Given(string.Format("I have initialized a {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 14
 testRunner.When(string.Format("I insert {0} {1} entities using {2} methods", entityCount, entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 15
 testRunner.And(string.Format("I query for all the {0} entities using {1} methods", entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 16
 testRunner.And(string.Format("I query for the count of all the {0} entities using {1} methods", entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 17
 testRunner.Then("the queried entities should be the same as the local ones", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 18
 testRunner.And(string.Format("the database count of the queried entities should be {0}", entityCount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Insert and select all (external database)")]
        [NUnit.Framework.CategoryAttribute("ExternalDatabase")]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "employee", "1", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "employee", "1", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "building", "1", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "building", "1", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "employee", "1", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "employee", "1", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "building", "1", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "building", "1", "synchronous", null)]
        public virtual void InsertAndSelectAllExternalDatabase(string databaseType, string entityType, string entityCount, string methodType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ExternalDatabase"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Insert and select all (external database)", @__tags);
#line 33
this.ScenarioSetup(scenarioInfo);
#line 34
 testRunner.Given(string.Format("I have initialized a {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 35
 testRunner.When(string.Format("I insert {0} {1} entities using {2} methods", entityCount, entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 36
 testRunner.And(string.Format("I query for all the {0} entities using {1} methods", entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 37
 testRunner.And(string.Format("I query for the count of all the {0} entities using {1} methods", entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 38
 testRunner.Then("the queried entities should be the same as the local ones", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 39
 testRunner.And(string.Format("the database count of the queried entities should be {0}", entityCount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Find (in-memory database)")]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "workstation", "10", "1", "2", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("SqLite", "workstation", "10", "1", "2", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "workstation", "10", "1", "2", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("SqLite", "workstation", "10", "1", "2", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "workstation", "10", "1", "NULL", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("SqLite", "workstation", "10", "1", "NULL", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "workstation", "10", "NULL", "2", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("SqLite", "workstation", "10", "NULL", "2", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "workstation", "10", "NULL", "NULL", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("SqLite", "workstation", "10", "NULL", "NULL", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "workstation", "10", "1", "0", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("SqLite", "workstation", "10", "1", "0", "synchronous", null)]
        public virtual void FindIn_MemoryDatabase(string databaseType, string entityType, string entityCount, string max, string skip, string methodType, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find (in-memory database)", exampleTags);
#line 52
this.ScenarioSetup(scenarioInfo);
#line 53
 testRunner.Given(string.Format("I have initialized a {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 54
 testRunner.When(string.Format("I insert {0} {1} entities using {2} methods", entityCount, entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 55
 testRunner.And(string.Format("I query for a maximum of {0} {1} entities reverse ordered skipping {2} records", max, entityType, skip), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 56
 testRunner.Then(string.Format("the queried entities should be the same as the ones I inserted, in reverse order," +
                        " starting from {0} counting {1}", skip, max), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Find (external database)")]
        [NUnit.Framework.CategoryAttribute("ExternalDatabase")]
        [NUnit.Framework.TestCaseAttribute("MySql", "workstation", "10", "1", "2", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "workstation", "10", "1", "2", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "workstation", "10", "1", "2", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "workstation", "10", "1", "2", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "workstation", "10", "1", "NULL", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "workstation", "10", "1", "NULL", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "workstation", "10", "NULL", "2", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "workstation", "10", "NULL", "2", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "workstation", "10", "NULL", "NULL", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "workstation", "10", "NULL", "NULL", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "workstation", "10", "1", "0", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "workstation", "10", "1", "0", "synchronous", null)]
        public virtual void FindExternalDatabase(string databaseType, string entityType, string entityCount, string max, string skip, string methodType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ExternalDatabase"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find (external database)", @__tags);
#line 73
this.ScenarioSetup(scenarioInfo);
#line 74
 testRunner.Given(string.Format("I have initialized a {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 75
 testRunner.When(string.Format("I insert {0} {1} entities using {2} methods", entityCount, entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 76
 testRunner.And(string.Format("I query for a maximum of {0} {1} entities reverse ordered skipping {2} records", max, entityType, skip), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 77
 testRunner.Then(string.Format("the queried entities should be the same as the ones I inserted, in reverse order," +
                        " starting from {0} counting {1}", skip, max), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Insert and select by primary key (in-memory database)")]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "employee", "1", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "workstation", "1", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "building", "1", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("SqLite", "building", "1", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "employee", "1", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "workstation", "1", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "building", "1", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("SqLite", "building", "1", "synchronous", null)]
        public virtual void InsertAndSelectByPrimaryKeyIn_MemoryDatabase(string databaseType, string entityType, string entityCount, string methodType, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Insert and select by primary key (in-memory database)", exampleTags);
#line 94
this.ScenarioSetup(scenarioInfo);
#line 95
 testRunner.Given(string.Format("I have initialized a {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 96
 testRunner.When(string.Format("I insert {0} {1} entities using {2} methods", entityCount, entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 97
 testRunner.And(string.Format("I query for the inserted {0} entities using {1} methods", entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 98
 testRunner.Then("the queried entities should be the same as the local ones", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Insert and select by primary key (external database)")]
        [NUnit.Framework.CategoryAttribute("ExternalDatabase")]
        [NUnit.Framework.TestCaseAttribute("MySql", "employee", "1", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "employee", "1", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "workstation", "1", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "workstation", "1", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "building", "1", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "building", "1", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "employee", "1", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "employee", "1", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "workstation", "1", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "workstation", "1", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "building", "1", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "building", "1", "synchronous", null)]
        public virtual void InsertAndSelectByPrimaryKeyExternalDatabase(string databaseType, string entityType, string entityCount, string methodType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ExternalDatabase"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Insert and select by primary key (external database)", @__tags);
#line 111
this.ScenarioSetup(scenarioInfo);
#line 112
 testRunner.Given(string.Format("I have initialized a {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 113
 testRunner.When(string.Format("I insert {0} {1} entities using {2} methods", entityCount, entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 114
 testRunner.And(string.Format("I query for the inserted {0} entities using {1} methods", entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 115
 testRunner.Then("the queried entities should be the same as the local ones", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Update by primary keys (in-memory database)")]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "employee", "1", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "workstation", "1", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "building", "1", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "employee", "1", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "workstation", "1", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("SqLite", "building", "1", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "building", "1", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("SqLite", "building", "1", "synchronous", null)]
        public virtual void UpdateByPrimaryKeysIn_MemoryDatabase(string databaseType, string entityType, string entityCount, string methodType, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update by primary keys (in-memory database)", exampleTags);
#line 132
this.ScenarioSetup(scenarioInfo);
#line 133
 testRunner.Given(string.Format("I have initialized a {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 134
 testRunner.When(string.Format("I insert {0} {1} entities using {2} methods", entityCount, entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 135
 testRunner.And(string.Format("I update all the inserted {0} entities using {1} methods", entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 136
 testRunner.And(string.Format("I query for all the {0} entities using {1} methods", entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 137
 testRunner.Then("the queried entities should be the same as the local ones", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Update by primary keys (external database)")]
        [NUnit.Framework.CategoryAttribute("ExternalDatabase")]
        [NUnit.Framework.TestCaseAttribute("MySql", "employee", "1", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "employee", "1", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "workstation", "1", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "workstation", "1", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "building", "1", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "building", "1", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "employee", "1", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "employee", "1", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "workstation", "1", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "workstation", "1", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "building", "1", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "building", "1", "synchronous", null)]
        public virtual void UpdateByPrimaryKeysExternalDatabase(string databaseType, string entityType, string entityCount, string methodType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ExternalDatabase"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update by primary keys (external database)", @__tags);
#line 150
this.ScenarioSetup(scenarioInfo);
#line 151
 testRunner.Given(string.Format("I have initialized a {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 152
 testRunner.When(string.Format("I insert {0} {1} entities using {2} methods", entityCount, entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 153
 testRunner.And(string.Format("I update all the inserted {0} entities using {1} methods", entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 154
 testRunner.And(string.Format("I query for all the {0} entities using {1} methods", entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 155
 testRunner.Then("the queried entities should be the same as the local ones", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Partial update (in-memory database)")]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "employee", "3", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "employee", "3", "synchronous", null)]
        public virtual void PartialUpdateIn_MemoryDatabase(string databaseType, string entityType, string entityCount, string methodType, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Partial update (in-memory database)", exampleTags);
#line 172
this.ScenarioSetup(scenarioInfo);
#line 173
 testRunner.Given(string.Format("I have initialized a {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 174
 testRunner.When(string.Format("I insert {0} {1} entities using {2} methods", entityCount, entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 175
 testRunner.And(string.Format("I partially update all the inserted {0} entities", entityType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 176
 testRunner.And(string.Format("I query for all the {0} entities using {1} methods", entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 177
 testRunner.Then("the queried entities should be the same as the local ones", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Partial update (external database)")]
        [NUnit.Framework.CategoryAttribute("ExternalDatabase")]
        [NUnit.Framework.TestCaseAttribute("MySql", "employee", "3", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "employee", "3", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "employee", "3", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "employee", "3", "synchronous", null)]
        public virtual void PartialUpdateExternalDatabase(string databaseType, string entityType, string entityCount, string methodType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ExternalDatabase"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Partial update (external database)", @__tags);
#line 184
this.ScenarioSetup(scenarioInfo);
#line 185
 testRunner.Given(string.Format("I have initialized a {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 186
 testRunner.When(string.Format("I insert {0} {1} entities using {2} methods", entityCount, entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 187
 testRunner.And(string.Format("I partially update all the inserted {0} entities", entityType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 188
 testRunner.And(string.Format("I query for all the {0} entities using {1} methods", entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 189
 testRunner.Then("the queried entities should be the same as the local ones", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Delete by primary keys (in-memory database)")]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "employee", "3", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "workstation", "3", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "building", "3", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("SqLite", "building", "3", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("SqLite", "building", "3", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "employee", "3", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "workstation", "3", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "building", "3", "synchronous", null)]
        public virtual void DeleteByPrimaryKeysIn_MemoryDatabase(string databaseType, string entityType, string entityCount, string methodType, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete by primary keys (in-memory database)", exampleTags);
#line 198
this.ScenarioSetup(scenarioInfo);
#line 199
 testRunner.Given(string.Format("I have initialized a {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 200
 testRunner.When(string.Format("I insert {0} {1} entities using {2} methods", entityCount, entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 201
 testRunner.And(string.Format("I delete all the inserted {0} entities using {1} methods", entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 202
 testRunner.And(string.Format("I query for all the {0} entities using {1} methods", entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 203
 testRunner.Then("the queried entities should be the same as the local ones", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Delete by primary keys (external database)")]
        [NUnit.Framework.CategoryAttribute("ExternalDatabase")]
        [NUnit.Framework.TestCaseAttribute("MySql", "employee", "3", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "employee", "3", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "workstation", "3", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "workstation", "3", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "workstation", "3", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "building", "3", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "building", "3", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "building", "3", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "employee", "3", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "employee", "3", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "workstation", "3", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "building", "3", "synchronous", null)]
        public virtual void DeleteByPrimaryKeysExternalDatabase(string databaseType, string entityType, string entityCount, string methodType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ExternalDatabase"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete by primary keys (external database)", @__tags);
#line 216
this.ScenarioSetup(scenarioInfo);
#line 217
 testRunner.Given(string.Format("I have initialized a {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 218
 testRunner.When(string.Format("I insert {0} {1} entities using {2} methods", entityCount, entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 219
 testRunner.And(string.Format("I delete all the inserted {0} entities using {1} methods", entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 220
 testRunner.And(string.Format("I query for all the {0} entities using {1} methods", entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 221
 testRunner.Then("the queried entities should be the same as the local ones", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

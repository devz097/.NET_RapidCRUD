// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Dapper.FastCrud.Tests
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("CRUD tests")]
    public partial class CRUDTestsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "Crud.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "", "CRUD tests", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Insert and select all (build server test)")]
        [NUnit.Framework.CategoryAttribute("AutomaticBuildServerTest")]
        [NUnit.Framework.CategoryAttribute("AutomaticBuildServerTest")]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "employee", "5", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "workstation", "4", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("SqLite", "workstation", "6", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "building", "3", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("SqLite", "building", "4", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "employee", "3", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "workstation", "4", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("SqLite", "workstation", "2", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "building", "4", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("SqLite", "building", "2", "synchronous", null)]
        public void InsertAndSelectAllBuildServerTest(string databaseType, string entityType, string entityCount, string methodType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "AutomaticBuildServerTest",
                    "AutomaticBuildServerTest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("database type", databaseType);
            argumentsOfScenario.Add("entity type", entityType);
            argumentsOfScenario.Add("entity count", entityCount);
            argumentsOfScenario.Add("method type", methodType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Insert and select all (build server test)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
 testRunner.Given(string.Format("I have initialized a {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
 testRunner.When(string.Format("I insert {0} {1} entities using {2} methods", entityCount, entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 9
 testRunner.And(string.Format("I query for all the inserted {0} entities using {1} methods", entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 10
 testRunner.And(string.Format("I query for the count of all the {0} entities using {1} methods", entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 11
 testRunner.Then(string.Format("the queried {0} entities should be the same as the inserted ones", entityType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 12
 testRunner.And(string.Format("the result of the last query count should be {0}", entityCount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Insert and select all (external database)")]
        [NUnit.Framework.CategoryAttribute("ExternalDatabase")]
        [NUnit.Framework.TestCaseAttribute("SQLAnywhere", "employee", "4", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "employee", "4", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "employee", "3", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "building", "2", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "building", "3", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "employee", "4", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "employee", "3", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "building", "2", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "building", "3", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("SqlAnywhere", "building", "3", "synchronous", null)]
        public void InsertAndSelectAllExternalDatabase(string databaseType, string entityType, string entityCount, string methodType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ExternalDatabase"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("database type", databaseType);
            argumentsOfScenario.Add("entity type", entityType);
            argumentsOfScenario.Add("entity count", entityCount);
            argumentsOfScenario.Add("method type", methodType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Insert and select all (external database)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 27
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 28
 testRunner.Given(string.Format("I have initialized a {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 29
 testRunner.When(string.Format("I insert {0} {1} entities using {2} methods", entityCount, entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 30
 testRunner.And(string.Format("I query for all the inserted {0} entities using {1} methods", entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 31
 testRunner.And(string.Format("I query for the count of all the {0} entities using {1} methods", entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 32
 testRunner.Then(string.Format("the queried {0} entities should be the same as the inserted ones", entityType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 33
 testRunner.And(string.Format("the result of the last query count should be {0}", entityCount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Count with a where clause (build server test)")]
        [NUnit.Framework.CategoryAttribute("AutomaticBuildServerTest")]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "6", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "6", "synchronous", null)]
        public void CountWithAWhereClauseBuildServerTest(string databaseType, string entityCount, string methodType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "AutomaticBuildServerTest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("database type", databaseType);
            argumentsOfScenario.Add("entity count", entityCount);
            argumentsOfScenario.Add("method type", methodType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Count with a where clause (build server test)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 48
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 49
 testRunner.Given(string.Format("I have initialized a {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 50
 testRunner.When(string.Format("I insert {0} building entities using {1} methods", entityCount, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 51
 testRunner.And(string.Format("I query for the count of all the inserted building entities using {0} methods", methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 52
 testRunner.Then(string.Format("the result of the last query count should be {0}", entityCount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Count with a where clause (external database)")]
        [NUnit.Framework.CategoryAttribute("ExternalDatabase")]
        [NUnit.Framework.TestCaseAttribute("SqlAnywhere", "4", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "4", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "3", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "4", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "3", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("SqlAnywhere", "3", "synchronous", null)]
        public void CountWithAWhereClauseExternalDatabase(string databaseType, string entityCount, string methodType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ExternalDatabase"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("database type", databaseType);
            argumentsOfScenario.Add("entity count", entityCount);
            argumentsOfScenario.Add("method type", methodType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Count with a where clause (external database)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 59
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 60
 testRunner.Given(string.Format("I have initialized a {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 61
 testRunner.When(string.Format("I insert {0} building entities using {1} methods", entityCount, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 62
 testRunner.And(string.Format("I query for the count of all the inserted building entities using {0} methods", methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 63
 testRunner.Then(string.Format("the result of the last query count should be {0}", entityCount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Find entities (build server test)")]
        [NUnit.Framework.CategoryAttribute("AutomaticBuildServerTest")]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "workstation", "10", "1", "2", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("SqLite", "workstation", "10", "1", "2", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "workstation", "10", "1", "2", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("SqLite", "workstation", "10", "1", "2", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "workstation", "10", "1", "", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("SqLite", "workstation", "10", "1", "", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "workstation", "10", "", "2", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("SqLite", "workstation", "10", "", "2", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "workstation", "10", "", "", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("SqLite", "workstation", "10", "", "", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "workstation", "10", "1", "0", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("SqLite", "workstation", "10", "1", "0", "synchronous", null)]
        public void FindEntitiesBuildServerTest(string databaseType, string entityType, string entityCount, string max, string skip, string methodType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "AutomaticBuildServerTest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("database type", databaseType);
            argumentsOfScenario.Add("entity type", entityType);
            argumentsOfScenario.Add("entity count", entityCount);
            argumentsOfScenario.Add("max", max);
            argumentsOfScenario.Add("skip", skip);
            argumentsOfScenario.Add("method type", methodType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find entities (build server test)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 74
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 75
 testRunner.Given(string.Format("I have initialized a {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 76
 testRunner.When(string.Format("I insert {0} {1} entities using {2} methods", entityCount, entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 77
 testRunner.And(string.Format("I query for a maximum of {0} {1} entities reverse ordered skipping {2} records", max, entityType, skip), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 78
 testRunner.Then(string.Format("the queried {0} entities should be the same as the ones I inserted, in reverse or" +
                            "der, starting from {1} counting {2}", entityType, skip, max), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Find entities (external database)")]
        [NUnit.Framework.CategoryAttribute("ExternalDatabase")]
        [NUnit.Framework.TestCaseAttribute("SqlAnywhere", "workstation", "10", "1", "2", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "workstation", "10", "1", "2", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "workstation", "10", "1", "2", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "workstation", "10", "1", "2", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("SqlAnywhere", "workstation", "10", "1", "2", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "workstation", "10", "1", "2", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "workstation", "10", "1", "", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "workstation", "10", "1", "", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "workstation", "10", "", "2", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "workstation", "10", "", "2", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "workstation", "10", "", "", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "workstation", "10", "", "", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "workstation", "10", "1", "0", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "workstation", "10", "1", "0", "synchronous", null)]
        public void FindEntitiesExternalDatabase(string databaseType, string entityType, string entityCount, string max, string skip, string methodType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ExternalDatabase"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("database type", databaseType);
            argumentsOfScenario.Add("entity type", entityType);
            argumentsOfScenario.Add("entity count", entityCount);
            argumentsOfScenario.Add("max", max);
            argumentsOfScenario.Add("skip", skip);
            argumentsOfScenario.Add("method type", methodType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find entities (external database)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 95
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 96
 testRunner.Given(string.Format("I have initialized a {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 97
 testRunner.When(string.Format("I insert {0} {1} entities using {2} methods", entityCount, entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 98
 testRunner.And(string.Format("I query for a maximum of {0} {1} entities reverse ordered skipping {2} records", max, entityType, skip), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 99
 testRunner.Then(string.Format("the queried {0} entities should be the same as the ones I inserted, in reverse or" +
                            "der, starting from {1} counting {2}", entityType, skip, max), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Insert and select by primary key (build server test)")]
        [NUnit.Framework.CategoryAttribute("AutomaticBuildServerTest")]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "employee", "2", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "workstation", "2", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "building", "2", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("SqLite", "building", "2", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "employee", "2", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "workstation", "2", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "building", "2", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("SqLite", "building", "2", "synchronous", null)]
        public void InsertAndSelectByPrimaryKeyBuildServerTest(string databaseType, string entityType, string entityCount, string methodType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "AutomaticBuildServerTest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("database type", databaseType);
            argumentsOfScenario.Add("entity type", entityType);
            argumentsOfScenario.Add("entity count", entityCount);
            argumentsOfScenario.Add("method type", methodType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Insert and select by primary key (build server test)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 118
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 119
 testRunner.Given(string.Format("I have initialized a {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 120
 testRunner.When(string.Format("I insert {0} {1} entities using {2} methods", entityCount, entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 121
 testRunner.And(string.Format("I query for the inserted {0} entities using {1} methods", entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 122
 testRunner.Then(string.Format("the queried {0} entities should be the same as the inserted ones", entityType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Insert and select by primary key (external database)")]
        [NUnit.Framework.CategoryAttribute("ExternalDatabase")]
        [NUnit.Framework.TestCaseAttribute("MySql", "employee", "2", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "employee", "2", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("SqlAnywhere", "employee", "2", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "workstation", "2", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "workstation", "2", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "building", "2", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "building", "2", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "employee", "2", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "employee", "2", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "workstation", "2", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "workstation", "2", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "building", "2", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "building", "2", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("SqlAnywhere", "building", "2", "synchronous", null)]
        public void InsertAndSelectByPrimaryKeyExternalDatabase(string databaseType, string entityType, string entityCount, string methodType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ExternalDatabase"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("database type", databaseType);
            argumentsOfScenario.Add("entity type", entityType);
            argumentsOfScenario.Add("entity count", entityCount);
            argumentsOfScenario.Add("method type", methodType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Insert and select by primary key (external database)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 135
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 136
 testRunner.Given(string.Format("I have initialized a {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 137
 testRunner.When(string.Format("I insert {0} {1} entities using {2} methods", entityCount, entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 138
 testRunner.And(string.Format("I query for the inserted {0} entities using {1} methods", entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 139
 testRunner.Then(string.Format("the queried {0} entities should be the same as the inserted ones", entityType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Update by primary keys (build server test)")]
        [NUnit.Framework.CategoryAttribute("AutomaticBuildServerTest")]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "employee", "2", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "workstation", "2", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "building", "2", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "employee", "2", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "workstation", "2", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("SqLite", "building", "2", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "building", "2", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("SqLite", "building", "2", "synchronous", null)]
        public void UpdateByPrimaryKeysBuildServerTest(string databaseType, string entityType, string entityCount, string methodType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "AutomaticBuildServerTest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("database type", databaseType);
            argumentsOfScenario.Add("entity type", entityType);
            argumentsOfScenario.Add("entity count", entityCount);
            argumentsOfScenario.Add("method type", methodType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update by primary keys (build server test)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 158
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 159
 testRunner.Given(string.Format("I have initialized a {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 160
 testRunner.When(string.Format("I insert {0} {1} entities using {2} methods", entityCount, entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 161
 testRunner.And(string.Format("I update all the inserted {0} entities using {1} methods", entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 162
 testRunner.And(string.Format("I query for all the inserted {0} entities using {1} methods", entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 163
 testRunner.Then(string.Format("the queried {0} entities should be the same as the updated ones", entityType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Update by primary keys (external database)")]
        [NUnit.Framework.CategoryAttribute("ExternalDatabase")]
        [NUnit.Framework.TestCaseAttribute("MySql", "employee", "2", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("SqlAnywhere", "employee", "2", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "employee", "2", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "workstation", "2", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "workstation", "2", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "building", "2", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "building", "2", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "employee", "2", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "employee", "2", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "workstation", "2", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "workstation", "2", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "building", "2", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "building", "2", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("SqlAnywhere", "building", "2", "synchronous", null)]
        public void UpdateByPrimaryKeysExternalDatabase(string databaseType, string entityType, string entityCount, string methodType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ExternalDatabase"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("database type", databaseType);
            argumentsOfScenario.Add("entity type", entityType);
            argumentsOfScenario.Add("entity count", entityCount);
            argumentsOfScenario.Add("method type", methodType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update by primary keys (external database)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 176
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 177
 testRunner.Given(string.Format("I have initialized a {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 178
 testRunner.When(string.Format("I insert {0} {1} entities using {2} methods", entityCount, entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 179
 testRunner.And(string.Format("I update all the inserted {0} entities using {1} methods", entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 180
 testRunner.And(string.Format("I query for all the inserted {0} entities using {1} methods", entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 181
 testRunner.Then(string.Format("the queried {0} entities should be the same as the updated ones", entityType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Partial update (build server test)")]
        [NUnit.Framework.CategoryAttribute("AutomaticBuildServerTest")]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "employee", "3", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "employee", "3", "synchronous", null)]
        public void PartialUpdateBuildServerTest(string databaseType, string entityType, string entityCount, string methodType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "AutomaticBuildServerTest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("database type", databaseType);
            argumentsOfScenario.Add("entity type", entityType);
            argumentsOfScenario.Add("entity count", entityCount);
            argumentsOfScenario.Add("method type", methodType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Partial update (build server test)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 200
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 201
 testRunner.Given(string.Format("I have initialized a {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 202
 testRunner.When(string.Format("I insert {0} {1} entities using {2} methods", entityCount, entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 203
 testRunner.And(string.Format("I partially update all the inserted {0} entities", entityType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 204
 testRunner.And(string.Format("I query for all the inserted {0} entities using {1} methods", entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 205
 testRunner.Then(string.Format("the queried {0} entities should be the same as the updated ones", entityType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Partial update (external database)")]
        [NUnit.Framework.CategoryAttribute("ExternalDatabase")]
        [NUnit.Framework.TestCaseAttribute("MySql", "employee", "3", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "employee", "3", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "employee", "3", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "employee", "3", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("SqlAnywhere", "employee", "3", "synchronous", null)]
        public void PartialUpdateExternalDatabase(string databaseType, string entityType, string entityCount, string methodType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ExternalDatabase"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("database type", databaseType);
            argumentsOfScenario.Add("entity type", entityType);
            argumentsOfScenario.Add("entity count", entityCount);
            argumentsOfScenario.Add("method type", methodType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Partial update (external database)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 212
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 213
 testRunner.Given(string.Format("I have initialized a {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 214
 testRunner.When(string.Format("I insert {0} {1} entities using {2} methods", entityCount, entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 215
 testRunner.And(string.Format("I partially update all the inserted {0} entities", entityType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 216
 testRunner.And(string.Format("I query for all the inserted {0} entities using {1} methods", entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 217
 testRunner.Then(string.Format("the queried {0} entities should be the same as the updated ones", entityType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Delete by primary keys (build server test)")]
        [NUnit.Framework.CategoryAttribute("AutomaticBuildServerTest")]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "employee", "3", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "workstation", "3", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "building", "3", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("SqLite", "building", "3", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("SqLite", "building", "3", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "employee", "3", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "workstation", "3", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "building", "3", "synchronous", null)]
        public void DeleteByPrimaryKeysBuildServerTest(string databaseType, string entityType, string entityCount, string methodType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "AutomaticBuildServerTest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("database type", databaseType);
            argumentsOfScenario.Add("entity type", entityType);
            argumentsOfScenario.Add("entity count", entityCount);
            argumentsOfScenario.Add("method type", methodType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete by primary keys (build server test)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 227
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 228
 testRunner.Given(string.Format("I have initialized a {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 229
 testRunner.When(string.Format("I insert {0} {1} entities using {2} methods", entityCount, entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 230
 testRunner.And(string.Format("I delete all the inserted {0} entities using {1} methods", entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 231
 testRunner.And(string.Format("I query for all the inserted {0} entities using {1} methods", entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 232
 testRunner.Then("the result of the last query count should be 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Delete by primary keys (external database)")]
        [NUnit.Framework.CategoryAttribute("ExternalDatabase")]
        [NUnit.Framework.TestCaseAttribute("MySql", "employee", "3", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "employee", "3", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("SqlAnywhere", "employee", "3", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "workstation", "3", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "workstation", "3", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "workstation", "3", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "building", "3", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "building", "3", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "building", "3", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "employee", "3", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "employee", "3", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "workstation", "3", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "building", "3", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("SqlAnywhere", "employee", "3", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("SqlAnywhere", "workstation", "3", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("SqlAnywhere", "building", "3", "synchronous", null)]
        public void DeleteByPrimaryKeysExternalDatabase(string databaseType, string entityType, string entityCount, string methodType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ExternalDatabase"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("database type", databaseType);
            argumentsOfScenario.Add("entity type", entityType);
            argumentsOfScenario.Add("entity count", entityCount);
            argumentsOfScenario.Add("method type", methodType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete by primary keys (external database)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 245
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 246
 testRunner.Given(string.Format("I have initialized a {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 247
 testRunner.When(string.Format("I insert {0} {1} entities using {2} methods", entityCount, entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 248
 testRunner.And(string.Format("I delete all the inserted {0} entities using {1} methods", entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 249
 testRunner.And(string.Format("I query for all the inserted {0} entities using {1} methods", entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 250
 testRunner.Then("the result of the last query count should be 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Batch update (build server test)")]
        [NUnit.Framework.CategoryAttribute("AutomaticBuildServerTest")]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "employee", "10", "3", "2", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "employee", "10", "3", "2", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("SqLite", "workstation", "10", "3", "2", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("SqLite", "workstation", "10", "3", "2", "asynchronous", null)]
        public void BatchUpdateBuildServerTest(string databaseType, string entityType, string entityCount, string skip, string max, string methodType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "AutomaticBuildServerTest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("database type", databaseType);
            argumentsOfScenario.Add("entity type", entityType);
            argumentsOfScenario.Add("entity count", entityCount);
            argumentsOfScenario.Add("skip", skip);
            argumentsOfScenario.Add("max", max);
            argumentsOfScenario.Add("method type", methodType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Batch update (build server test)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 271
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 272
 testRunner.Given(string.Format("I have initialized a {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 273
 testRunner.When(string.Format("I insert {0} {1} entities using {2} methods", entityCount, entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 274
 testRunner.And(string.Format("I batch update all the inserted {0} entities using {1} methods", entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 275
 testRunner.And(string.Format("I query for all the inserted {0} entities using {1} methods", entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 276
 testRunner.Then(string.Format("the queried {0} entities should be the same as the updated ones", entityType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Batch update (external database)")]
        [NUnit.Framework.CategoryAttribute("ExternalDatabase")]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "employee", "10", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "employee", "10", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("SqlAnywhere", "employee", "10", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("SqlAnywhere", "employee", "10", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "employee", "10", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "employee", "10", "asynchronous", null)]
        public void BatchUpdateExternalDatabase(string databaseType, string entityType, string entityCount, string methodType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ExternalDatabase"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("database type", databaseType);
            argumentsOfScenario.Add("entity type", entityType);
            argumentsOfScenario.Add("entity count", entityCount);
            argumentsOfScenario.Add("method type", methodType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Batch update (external database)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 285
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 286
 testRunner.Given(string.Format("I have initialized a {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 287
 testRunner.When(string.Format("I insert {0} {1} entities using {2} methods", entityCount, entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 288
 testRunner.And(string.Format("I batch update all the inserted {0} entities using {1} methods", entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 289
 testRunner.And(string.Format("I query for all the inserted {0} entities using {1} methods", entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 290
 testRunner.Then(string.Format("the queried {0} entities should be the same as the updated ones", entityType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Batch delete (build server test)")]
        [NUnit.Framework.CategoryAttribute("AutomaticBuildServerTest")]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "workstation", "10", "3", "2", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "workstation", "10", "3", "2", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("SqLite", "workstation", "10", "3", "2", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("SqLite", "workstation", "10", "3", "2", "asynchronous", null)]
        public void BatchDeleteBuildServerTest(string databaseType, string entityType, string entityCount, string skip, string max, string methodType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "AutomaticBuildServerTest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("database type", databaseType);
            argumentsOfScenario.Add("entity type", entityType);
            argumentsOfScenario.Add("entity count", entityCount);
            argumentsOfScenario.Add("skip", skip);
            argumentsOfScenario.Add("max", max);
            argumentsOfScenario.Add("method type", methodType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Batch delete (build server test)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 301
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 302
 testRunner.Given(string.Format("I have initialized a {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 303
 testRunner.When(string.Format("I insert {0} {1} entities using {2} methods", entityCount, entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 304
 testRunner.And(string.Format("I batch delete all the inserted {0} entities using {1} methods", entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 305
 testRunner.And(string.Format("I query for all the inserted {0} entities using {1} methods", entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 306
 testRunner.Then("the result of the last query count should be 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Batch delete (external database)")]
        [NUnit.Framework.CategoryAttribute("ExternalDatabase")]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "workstation", "10", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "workstation", "10", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("SqlAnywhere", "workstation", "10", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("SqlAnywhere", "workstation", "10", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "workstation", "10", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "workstation", "10", "asynchronous", null)]
        public void BatchDeleteExternalDatabase(string databaseType, string entityType, string entityCount, string methodType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ExternalDatabase"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("database type", databaseType);
            argumentsOfScenario.Add("entity type", entityType);
            argumentsOfScenario.Add("entity count", entityCount);
            argumentsOfScenario.Add("method type", methodType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Batch delete (external database)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 315
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 316
 testRunner.Given(string.Format("I have initialized a {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 317
 testRunner.When(string.Format("I insert {0} {1} entities using {2} methods", entityCount, entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 318
 testRunner.And(string.Format("I batch delete all the inserted {0} entities using {1} methods", entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 319
 testRunner.And(string.Format("I query for all the inserted {0} entities using {1} methods", entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 320
 testRunner.Then("the result of the last query count should be 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

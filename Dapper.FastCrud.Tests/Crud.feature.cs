// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Dapper.FastCrud.Tests
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("CRUD tests")]
    public partial class CRUDTestsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "Crud.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "", "CRUD tests", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Batch update (build server test)")]
        [NUnit.Framework.CategoryAttribute("AutomaticBuildServerTest")]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "employee", "10", "3", "2", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "employee", "10", "3", "2", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("SqLite", "workstation", "10", "3", "2", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("SqLite", "workstation", "10", "3", "2", "asynchronous", null)]
        public virtual void BatchUpdateBuildServerTest(string databaseType, string entityType, string entityCount, string skip, string max, string methodType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "AutomaticBuildServerTest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("database type", databaseType);
            argumentsOfScenario.Add("entity type", entityType);
            argumentsOfScenario.Add("entity count", entityCount);
            argumentsOfScenario.Add("skip", skip);
            argumentsOfScenario.Add("max", max);
            argumentsOfScenario.Add("method type", methodType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Batch update (build server test)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
 testRunner.Given(string.Format("I have initialized a {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 6
 testRunner.When(string.Format("I insert {0} {1} entities using {2} methods", entityCount, entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 7
 testRunner.And(string.Format("I batch update a maximum of {0} {1} entities skipping {2} and using {3} methods", max, entityType, skip, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 8
 testRunner.And(string.Format("I query for all the {0} entities using {1} methods", entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 9
 testRunner.Then(string.Format("the queried {0} entities should be the same as the updated ones", entityType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Batch update (external database)")]
        [NUnit.Framework.CategoryAttribute("ExternalDatabase")]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "employee", "10", "3", "2", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "employee", "10", "3", "2", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "employee", "10", "3", "2", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "employee", "10", "3", "2", "asynchronous", null)]
        public virtual void BatchUpdateExternalDatabase(string databaseType, string entityType, string entityCount, string skip, string max, string methodType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ExternalDatabase"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("database type", databaseType);
            argumentsOfScenario.Add("entity type", entityType);
            argumentsOfScenario.Add("entity count", entityCount);
            argumentsOfScenario.Add("skip", skip);
            argumentsOfScenario.Add("max", max);
            argumentsOfScenario.Add("method type", methodType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Batch update (external database)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 18
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 19
 testRunner.Given(string.Format("I have initialized a {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 20
 testRunner.When(string.Format("I insert {0} {1} entities using {2} methods", entityCount, entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 21
 testRunner.And(string.Format("I batch update a maximum of {0} {1} entities skipping {2} and using {3} methods", max, entityType, skip, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 22
 testRunner.And(string.Format("I query for all the {0} entities using {1} methods", entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 23
 testRunner.Then("the queried entities should be the same as the local ones", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Batch delete (build server test)")]
        [NUnit.Framework.CategoryAttribute("AutomaticBuildServerTest")]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "workstation", "10", "3", "2", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "workstation", "10", "3", "2", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("SqLite", "workstation", "10", "3", "2", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("SqLite", "workstation", "10", "3", "2", "asynchronous", null)]
        public virtual void BatchDeleteBuildServerTest(string databaseType, string entityType, string entityCount, string skip, string max, string methodType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "AutomaticBuildServerTest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("database type", databaseType);
            argumentsOfScenario.Add("entity type", entityType);
            argumentsOfScenario.Add("entity count", entityCount);
            argumentsOfScenario.Add("skip", skip);
            argumentsOfScenario.Add("max", max);
            argumentsOfScenario.Add("method type", methodType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Batch delete (build server test)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 32
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 33
 testRunner.Given(string.Format("I have initialized a {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 34
 testRunner.When(string.Format("I insert {0} {1} entities using {2} methods", entityCount, entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 35
 testRunner.And(string.Format("I batch delete a maximum of {0} {1} entities skipping {2} and using {3} methods", max, entityType, skip, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 36
 testRunner.And(string.Format("I query for all the {0} entities using {1} methods", entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 37
 testRunner.Then("the queried entities should be the same as the local ones", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Batch delete (external database)")]
        [NUnit.Framework.CategoryAttribute("ExternalDatabase")]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "workstation", "10", "3", "2", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "workstation", "10", "3", "2", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "workstation", "10", "3", "2", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "workstation", "10", "3", "2", "asynchronous", null)]
        public virtual void BatchDeleteExternalDatabase(string databaseType, string entityType, string entityCount, string skip, string max, string methodType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ExternalDatabase"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("database type", databaseType);
            argumentsOfScenario.Add("entity type", entityType);
            argumentsOfScenario.Add("entity count", entityCount);
            argumentsOfScenario.Add("skip", skip);
            argumentsOfScenario.Add("max", max);
            argumentsOfScenario.Add("method type", methodType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Batch delete (external database)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 46
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 47
 testRunner.Given(string.Format("I have initialized a {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 48
 testRunner.When(string.Format("I insert {0} {1} entities using {2} methods", entityCount, entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 49
 testRunner.And(string.Format("I batch delete a maximum of {0} {1} entities skipping {2} and using {3} methods", max, entityType, skip, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 50
 testRunner.And(string.Format("I query for all the {0} entities using {1} methods", entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 51
 testRunner.Then("the queried entities should be the same as the local ones", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Insert and select all (build server test)")]
        [NUnit.Framework.CategoryAttribute("AutomaticBuildServerTest")]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "employee", "1", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "workstation", "1", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("SqLite", "workstation", "1", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "building", "1", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("SqLite", "building", "1", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "employee", "1", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "workstation", "1", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("SqLite", "workstation", "1", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "building", "1", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("SqLite", "building", "1", "synchronous", null)]
        public virtual void InsertAndSelectAllBuildServerTest(string databaseType, string entityType, string entityCount, string methodType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "AutomaticBuildServerTest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("database type", databaseType);
            argumentsOfScenario.Add("entity type", entityType);
            argumentsOfScenario.Add("entity count", entityCount);
            argumentsOfScenario.Add("method type", methodType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Insert and select all (build server test)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 60
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 61
 testRunner.Given(string.Format("I have initialized a {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 62
 testRunner.When(string.Format("I insert {0} {1} entities using {2} methods", entityCount, entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 63
 testRunner.And(string.Format("I query for all the {0} entities using {1} methods", entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 64
 testRunner.And(string.Format("I query for the count of all the {0} entities using {1} methods", entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 65
 testRunner.Then("the queried entities should be the same as the local ones", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 66
 testRunner.And(string.Format("the database count of the queried entities should be {0}", entityCount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Conditional count (build server test)")]
        [NUnit.Framework.CategoryAttribute("AutomaticBuildServerTest")]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "6", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "6", "synchronous", null)]
        public virtual void ConditionalCountBuildServerTest(string databaseType, string entityCount, string methodType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "AutomaticBuildServerTest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("database type", databaseType);
            argumentsOfScenario.Add("entity count", entityCount);
            argumentsOfScenario.Add("method type", methodType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Conditional count (build server test)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 81
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 82
 testRunner.Given(string.Format("I have initialized a {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 83
 testRunner.When(string.Format("I insert {0} building entities using {1} methods", entityCount, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 84
 testRunner.And(string.Format("I query for the count of all the inserted building entities using {0} methods", methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 85
 testRunner.Then(string.Format("the database count of the queried entities should be {0}", entityCount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Insert and select all (external database)")]
        [NUnit.Framework.CategoryAttribute("ExternalDatabase")]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "employee", "1", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "employee", "1", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "building", "1", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "building", "1", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "employee", "1", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "employee", "1", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "building", "1", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "building", "1", "synchronous", null)]
        public virtual void InsertAndSelectAllExternalDatabase(string databaseType, string entityType, string entityCount, string methodType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ExternalDatabase"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("database type", databaseType);
            argumentsOfScenario.Add("entity type", entityType);
            argumentsOfScenario.Add("entity count", entityCount);
            argumentsOfScenario.Add("method type", methodType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Insert and select all (external database)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 92
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 93
 testRunner.Given(string.Format("I have initialized a {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 94
 testRunner.When(string.Format("I insert {0} {1} entities using {2} methods", entityCount, entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 95
 testRunner.And(string.Format("I query for all the {0} entities using {1} methods", entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 96
 testRunner.And(string.Format("I query for the count of all the {0} entities using {1} methods", entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 97
 testRunner.Then("the queried entities should be the same as the local ones", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 98
 testRunner.And(string.Format("the database count of the queried entities should be {0}", entityCount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Find (build server test)")]
        [NUnit.Framework.CategoryAttribute("AutomaticBuildServerTest")]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "workstation", "10", "1", "2", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("SqLite", "workstation", "10", "1", "2", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "workstation", "10", "1", "2", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("SqLite", "workstation", "10", "1", "2", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "workstation", "10", "1", "", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("SqLite", "workstation", "10", "1", "", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "workstation", "10", "", "2", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("SqLite", "workstation", "10", "", "2", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "workstation", "10", "", "", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("SqLite", "workstation", "10", "", "", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "workstation", "10", "1", "0", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("SqLite", "workstation", "10", "1", "0", "synchronous", null)]
        public virtual void FindBuildServerTest(string databaseType, string entityType, string entityCount, string max, string skip, string methodType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "AutomaticBuildServerTest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("database type", databaseType);
            argumentsOfScenario.Add("entity type", entityType);
            argumentsOfScenario.Add("entity count", entityCount);
            argumentsOfScenario.Add("max", max);
            argumentsOfScenario.Add("skip", skip);
            argumentsOfScenario.Add("method type", methodType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find (build server test)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 111
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 112
 testRunner.Given(string.Format("I have initialized a {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 113
 testRunner.When(string.Format("I insert {0} {1} entities using {2} methods", entityCount, entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 114
 testRunner.And(string.Format("I query for a maximum of {0} {1} entities reverse ordered skipping {2} records", max, entityType, skip), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 115
 testRunner.Then(string.Format("the queried entities should be the same as the ones I inserted, in reverse order," +
                            " starting from {0} counting {1}", skip, max), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Find (external database)")]
        [NUnit.Framework.CategoryAttribute("ExternalDatabase")]
        [NUnit.Framework.TestCaseAttribute("MySql", "workstation", "10", "1", "2", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "workstation", "10", "1", "2", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "workstation", "10", "1", "2", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "workstation", "10", "1", "2", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "workstation", "10", "1", "", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "workstation", "10", "1", "", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "workstation", "10", "", "2", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "workstation", "10", "", "2", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "workstation", "10", "", "", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "workstation", "10", "", "", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "workstation", "10", "1", "0", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "workstation", "10", "1", "0", "synchronous", null)]
        public virtual void FindExternalDatabase(string databaseType, string entityType, string entityCount, string max, string skip, string methodType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ExternalDatabase"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("database type", databaseType);
            argumentsOfScenario.Add("entity type", entityType);
            argumentsOfScenario.Add("entity count", entityCount);
            argumentsOfScenario.Add("max", max);
            argumentsOfScenario.Add("skip", skip);
            argumentsOfScenario.Add("method type", methodType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find (external database)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 132
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 133
 testRunner.Given(string.Format("I have initialized a {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 134
 testRunner.When(string.Format("I insert {0} {1} entities using {2} methods", entityCount, entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 135
 testRunner.And(string.Format("I query for a maximum of {0} {1} entities reverse ordered skipping {2} records", max, entityType, skip), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 136
 testRunner.Then(string.Format("the queried entities should be the same as the ones I inserted, in reverse order," +
                            " starting from {0} counting {1}", skip, max), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Insert and select by primary key (build server test)")]
        [NUnit.Framework.CategoryAttribute("AutomaticBuildServerTest")]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "employee", "1", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "workstation", "1", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "building", "1", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("SqLite", "building", "1", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "employee", "1", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "workstation", "1", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "building", "1", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("SqLite", "building", "1", "synchronous", null)]
        public virtual void InsertAndSelectByPrimaryKeyBuildServerTest(string databaseType, string entityType, string entityCount, string methodType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "AutomaticBuildServerTest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("database type", databaseType);
            argumentsOfScenario.Add("entity type", entityType);
            argumentsOfScenario.Add("entity count", entityCount);
            argumentsOfScenario.Add("method type", methodType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Insert and select by primary key (build server test)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 153
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 154
 testRunner.Given(string.Format("I have initialized a {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 155
 testRunner.When(string.Format("I insert {0} {1} entities using {2} methods", entityCount, entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 156
 testRunner.And(string.Format("I query for the inserted {0} entities using {1} methods", entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 157
 testRunner.Then("the queried entities should be the same as the local ones", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Insert and select by primary key (external database)")]
        [NUnit.Framework.CategoryAttribute("ExternalDatabase")]
        [NUnit.Framework.TestCaseAttribute("MySql", "employee", "1", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "employee", "1", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "workstation", "1", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "workstation", "1", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "building", "1", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "building", "1", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "employee", "1", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "employee", "1", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "workstation", "1", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "workstation", "1", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "building", "1", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "building", "1", "synchronous", null)]
        public virtual void InsertAndSelectByPrimaryKeyExternalDatabase(string databaseType, string entityType, string entityCount, string methodType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ExternalDatabase"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("database type", databaseType);
            argumentsOfScenario.Add("entity type", entityType);
            argumentsOfScenario.Add("entity count", entityCount);
            argumentsOfScenario.Add("method type", methodType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Insert and select by primary key (external database)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 170
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 171
 testRunner.Given(string.Format("I have initialized a {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 172
 testRunner.When(string.Format("I insert {0} {1} entities using {2} methods", entityCount, entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 173
 testRunner.And(string.Format("I query for the inserted {0} entities using {1} methods", entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 174
 testRunner.Then("the queried entities should be the same as the local ones", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Update by primary keys (build server test)")]
        [NUnit.Framework.CategoryAttribute("AutomaticBuildServerTest")]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "employee", "1", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "workstation", "1", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "building", "1", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "employee", "1", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "workstation", "1", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("SqLite", "building", "1", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "building", "1", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("SqLite", "building", "1", "synchronous", null)]
        public virtual void UpdateByPrimaryKeysBuildServerTest(string databaseType, string entityType, string entityCount, string methodType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "AutomaticBuildServerTest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("database type", databaseType);
            argumentsOfScenario.Add("entity type", entityType);
            argumentsOfScenario.Add("entity count", entityCount);
            argumentsOfScenario.Add("method type", methodType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update by primary keys (build server test)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 191
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 192
 testRunner.Given(string.Format("I have initialized a {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 193
 testRunner.When(string.Format("I insert {0} {1} entities using {2} methods", entityCount, entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 194
 testRunner.And(string.Format("I update all the inserted {0} entities using {1} methods", entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 195
 testRunner.And(string.Format("I query for all the {0} entities using {1} methods", entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 196
 testRunner.Then("the queried entities should be the same as the local ones", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Update by primary keys (external database)")]
        [NUnit.Framework.CategoryAttribute("ExternalDatabase")]
        [NUnit.Framework.TestCaseAttribute("MySql", "employee", "1", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "employee", "1", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "workstation", "1", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "workstation", "1", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "building", "1", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "building", "1", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "employee", "1", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "employee", "1", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "workstation", "1", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "workstation", "1", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "building", "1", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "building", "1", "synchronous", null)]
        public virtual void UpdateByPrimaryKeysExternalDatabase(string databaseType, string entityType, string entityCount, string methodType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ExternalDatabase"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("database type", databaseType);
            argumentsOfScenario.Add("entity type", entityType);
            argumentsOfScenario.Add("entity count", entityCount);
            argumentsOfScenario.Add("method type", methodType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update by primary keys (external database)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 209
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 210
 testRunner.Given(string.Format("I have initialized a {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 211
 testRunner.When(string.Format("I insert {0} {1} entities using {2} methods", entityCount, entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 212
 testRunner.And(string.Format("I update all the inserted {0} entities using {1} methods", entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 213
 testRunner.And(string.Format("I query for all the {0} entities using {1} methods", entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 214
 testRunner.Then("the queried entities should be the same as the local ones", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Partial update (build server test)")]
        [NUnit.Framework.CategoryAttribute("AutomaticBuildServerTest")]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "employee", "3", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "employee", "3", "synchronous", null)]
        public virtual void PartialUpdateBuildServerTest(string databaseType, string entityType, string entityCount, string methodType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "AutomaticBuildServerTest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("database type", databaseType);
            argumentsOfScenario.Add("entity type", entityType);
            argumentsOfScenario.Add("entity count", entityCount);
            argumentsOfScenario.Add("method type", methodType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Partial update (build server test)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 231
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 232
 testRunner.Given(string.Format("I have initialized a {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 233
 testRunner.When(string.Format("I insert {0} {1} entities using {2} methods", entityCount, entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 234
 testRunner.And(string.Format("I partially update all the inserted {0} entities", entityType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 235
 testRunner.And(string.Format("I query for all the {0} entities using {1} methods", entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 236
 testRunner.Then("the queried entities should be the same as the local ones", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Partial update (external database)")]
        [NUnit.Framework.CategoryAttribute("ExternalDatabase")]
        [NUnit.Framework.TestCaseAttribute("MySql", "employee", "3", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "employee", "3", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "employee", "3", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "employee", "3", "synchronous", null)]
        public virtual void PartialUpdateExternalDatabase(string databaseType, string entityType, string entityCount, string methodType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ExternalDatabase"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("database type", databaseType);
            argumentsOfScenario.Add("entity type", entityType);
            argumentsOfScenario.Add("entity count", entityCount);
            argumentsOfScenario.Add("method type", methodType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Partial update (external database)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 243
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 244
 testRunner.Given(string.Format("I have initialized a {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 245
 testRunner.When(string.Format("I insert {0} {1} entities using {2} methods", entityCount, entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 246
 testRunner.And(string.Format("I partially update all the inserted {0} entities", entityType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 247
 testRunner.And(string.Format("I query for all the {0} entities using {1} methods", entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 248
 testRunner.Then("the queried entities should be the same as the local ones", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Delete by primary keys (build server test)")]
        [NUnit.Framework.CategoryAttribute("AutomaticBuildServerTest")]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "employee", "3", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "workstation", "3", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "building", "3", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("SqLite", "building", "3", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("SqLite", "building", "3", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "employee", "3", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "workstation", "3", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "building", "3", "synchronous", null)]
        public virtual void DeleteByPrimaryKeysBuildServerTest(string databaseType, string entityType, string entityCount, string methodType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "AutomaticBuildServerTest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("database type", databaseType);
            argumentsOfScenario.Add("entity type", entityType);
            argumentsOfScenario.Add("entity count", entityCount);
            argumentsOfScenario.Add("method type", methodType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete by primary keys (build server test)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 257
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 258
 testRunner.Given(string.Format("I have initialized a {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 259
 testRunner.When(string.Format("I insert {0} {1} entities using {2} methods", entityCount, entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 260
 testRunner.And(string.Format("I delete all the inserted {0} entities using {1} methods", entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 261
 testRunner.And(string.Format("I query for all the {0} entities using {1} methods", entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 262
 testRunner.Then("the queried entities should be the same as the local ones", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Delete by primary keys (external database)")]
        [NUnit.Framework.CategoryAttribute("ExternalDatabase")]
        [NUnit.Framework.TestCaseAttribute("MySql", "employee", "3", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "employee", "3", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "workstation", "3", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "workstation", "3", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "workstation", "3", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "building", "3", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "building", "3", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "building", "3", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "employee", "3", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "employee", "3", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "workstation", "3", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "building", "3", "synchronous", null)]
        public virtual void DeleteByPrimaryKeysExternalDatabase(string databaseType, string entityType, string entityCount, string methodType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ExternalDatabase"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("database type", databaseType);
            argumentsOfScenario.Add("entity type", entityType);
            argumentsOfScenario.Add("entity count", entityCount);
            argumentsOfScenario.Add("method type", methodType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete by primary keys (external database)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 275
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 276
 testRunner.Given(string.Format("I have initialized a {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 277
 testRunner.When(string.Format("I insert {0} {1} entities using {2} methods", entityCount, entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 278
 testRunner.And(string.Format("I delete all the inserted {0} entities using {1} methods", entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 279
 testRunner.And(string.Format("I query for all the {0} entities using {1} methods", entityType, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 280
 testRunner.Then("the queried entities should be the same as the local ones", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

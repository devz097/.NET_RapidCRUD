// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Dapper.FastCrud.Tests
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Relationships")]
    public partial class RelationshipsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "Relationships.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "", "Relationships", "\tTests for the relationship between various entities", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Query single relationship parent with children (build server test)")]
        [NUnit.Framework.CategoryAttribute("AutomaticBuildServerTest")]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "10", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "10", "asynchronous", null)]
        public virtual void QuerySingleRelationshipParentWithChildrenBuildServerTest(string databaseType, string entityCount, string methodType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "AutomaticBuildServerTest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("database type", databaseType);
            argumentsOfScenario.Add("entity count", entityCount);
            argumentsOfScenario.Add("method type", methodType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Query single relationship parent with children (build server test)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
 testRunner.Given(string.Format("I have initialized a {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 7
 testRunner.When(string.Format("I insert 1 workstation entities using {0} methods", methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 8
 testRunner.And(string.Format("I insert {0} employee entities parented to existing workstation entities using {1" +
                            "} methods", entityCount, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 9
 testRunner.And(string.Format("I query for one workstation entity combined with the employee entities using {0} " +
                            "methods", methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 10
 testRunner.Then("the queried workstation entities should be the same as the inserted ones", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Query single relationship parent with children (external database)")]
        [NUnit.Framework.CategoryAttribute("ExternalDatabase")]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "10", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "10", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "10", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "10", "asynchronous", null)]
        public virtual void QuerySingleRelationshipParentWithChildrenExternalDatabase(string databaseType, string entityCount, string methodType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ExternalDatabase"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("database type", databaseType);
            argumentsOfScenario.Add("entity count", entityCount);
            argumentsOfScenario.Add("method type", methodType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Query single relationship parent with children (external database)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 17
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 18
 testRunner.Given(string.Format("I have initialized a {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 19
 testRunner.When(string.Format("I insert 1 workstation entities using {0} methods", methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 20
 testRunner.And(string.Format("I insert {0} employee entities parented to existing workstation entities using {1" +
                            "} methods", entityCount, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 21
 testRunner.And(string.Format("I query for one workstation entity combined with the employee entities using {0} " +
                            "methods", methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 22
 testRunner.Then("the queried workstation entities should be the same as the inserted ones", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Query single relationship one-to-one (build server test)")]
        [NUnit.Framework.CategoryAttribute("AutomaticBuildServerTest")]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "10", "2", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "10", "3", "asynchronous", null)]
        public virtual void QuerySingleRelationshipOne_To_OneBuildServerTest(string databaseType, string employeeCount, string badgeCount, string methodType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "AutomaticBuildServerTest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("database type", databaseType);
            argumentsOfScenario.Add("employee count", employeeCount);
            argumentsOfScenario.Add("badge count", badgeCount);
            argumentsOfScenario.Add("method type", methodType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Query single relationship one-to-one (build server test)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 31
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 32
 testRunner.Given(string.Format("I have initialized a {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 33
 testRunner.When(string.Format("I insert {0} employee entities using {1} methods", employeeCount, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 34
 testRunner.And(string.Format("I assign unique badges to the last inserted {0} employee entities using {1} metho" +
                            "ds", badgeCount, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 35
 testRunner.And(string.Format("I query for all the employee entities combined with the assigned badge entities u" +
                            "sing {0} methods", methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 36
 testRunner.Then("the queried employee entities should be the same as the inserted ones", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Query single relationship one-to-one (external database)")]
        [NUnit.Framework.CategoryAttribute("ExternalDatabase")]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "10", "2", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "10", "3", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "10", "4", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "10", "6", "asynchronous", null)]
        public virtual void QuerySingleRelationshipOne_To_OneExternalDatabase(string databaseType, string employeeCount, string badgeCount, string methodType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ExternalDatabase"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("database type", databaseType);
            argumentsOfScenario.Add("employee count", employeeCount);
            argumentsOfScenario.Add("badge count", badgeCount);
            argumentsOfScenario.Add("method type", methodType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Query single relationship one-to-one (external database)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 43
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 44
 testRunner.Given(string.Format("I have initialized a {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 45
 testRunner.When(string.Format("I insert {0} employee entities using {1} methods", employeeCount, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 46
 testRunner.And(string.Format("I assign unique badges to the last inserted {0} employee entities using {1} metho" +
                            "ds", badgeCount, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 47
 testRunner.And(string.Format("I query for all the employee entities combined with the assigned badge entities u" +
                            "sing {0} methods", methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 48
 testRunner.Then("the queried employee entities should be the same as the inserted ones", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Query single relationship parents with children (build server test)")]
        [NUnit.Framework.CategoryAttribute("AutomaticBuildServerTest")]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "10", "20", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "10", "20", "asynchronous", null)]
        public virtual void QuerySingleRelationshipParentsWithChildrenBuildServerTest(string databaseType, string parentEntityCount, string childEntityCount, string methodType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "AutomaticBuildServerTest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("database type", databaseType);
            argumentsOfScenario.Add("parent entity count", parentEntityCount);
            argumentsOfScenario.Add("child entity count", childEntityCount);
            argumentsOfScenario.Add("method type", methodType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Query single relationship parents with children (build server test)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 57
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 58
 testRunner.Given(string.Format("I have initialized a {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 59
 testRunner.When(string.Format("I insert {0} workstation entities using {1} methods", parentEntityCount, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 60
 testRunner.And(string.Format("I insert {0} employee entities parented to existing workstation entities using {1" +
                            "} methods", childEntityCount, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 61
 testRunner.And(string.Format("I query for all the workstation entities combined with the employee entities usin" +
                            "g {0} methods", methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 62
 testRunner.Then("the queried workstation entities should be the same as the inserted ones", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Query single relationship parents with children (external database)")]
        [NUnit.Framework.CategoryAttribute("ExternalDatabase")]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "10", "20", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "10", "20", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "10", "20", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "10", "20", "asynchronous", null)]
        public virtual void QuerySingleRelationshipParentsWithChildrenExternalDatabase(string databaseType, string parentEntityCount, string childEntityCount, string methodType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ExternalDatabase"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("database type", databaseType);
            argumentsOfScenario.Add("parent entity count", parentEntityCount);
            argumentsOfScenario.Add("child entity count", childEntityCount);
            argumentsOfScenario.Add("method type", methodType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Query single relationship parents with children (external database)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 69
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 70
 testRunner.Given(string.Format("I have initialized a {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 71
 testRunner.When(string.Format("I insert {0} workstation entities using {1} methods", parentEntityCount, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 72
 testRunner.And(string.Format("I insert {0} employee entities parented to existing workstation entities using {1" +
                            "} methods", childEntityCount, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 73
 testRunner.And(string.Format("I query for all the workstation entities combined with the employee entities usin" +
                            "g {0} methods", methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 74
 testRunner.Then("the queried workstation entities should be the same as the inserted ones", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Count single relationship parents with children (build server test)")]
        [NUnit.Framework.CategoryAttribute("AutomaticBuildServerTest")]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "10", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "10", "asynchronous", null)]
        public virtual void CountSingleRelationshipParentsWithChildrenBuildServerTest(string databaseType, string entityCount, string methodType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "AutomaticBuildServerTest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("database type", databaseType);
            argumentsOfScenario.Add("entity count", entityCount);
            argumentsOfScenario.Add("method type", methodType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Count single relationship parents with children (build server test)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 83
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 84
 testRunner.Given(string.Format("I have initialized a {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 85
 testRunner.When(string.Format("I insert {0} workstation entities using {1} methods", entityCount, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 86
 testRunner.And(string.Format("I insert {0} employee entities parented to existing workstation entities using {1" +
                            "} methods", entityCount, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 87
 testRunner.And(string.Format("I insert 3 workstation entities using {0} methods", methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 88
 testRunner.And(string.Format("I query for the count of all the workstation entities combined with the employee " +
                            "entities using {0} methods", methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 89
 testRunner.Then(string.Format("the result of the last query count should be {0}", entityCount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Count single relationship parents with children (external database)")]
        [NUnit.Framework.CategoryAttribute("ExternalDatabase")]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "10", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "10", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "10", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "10", "asynchronous", null)]
        public virtual void CountSingleRelationshipParentsWithChildrenExternalDatabase(string databaseType, string entityCount, string methodType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ExternalDatabase"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("database type", databaseType);
            argumentsOfScenario.Add("entity count", entityCount);
            argumentsOfScenario.Add("method type", methodType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Count single relationship parents with children (external database)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 96
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 97
 testRunner.Given(string.Format("I have initialized a {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 98
 testRunner.When(string.Format("I insert {0} workstation entities using {1} methods", entityCount, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 99
 testRunner.And(string.Format("I insert {0} employee entities parented to existing workstation entities using {1" +
                            "} methods", entityCount, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 100
 testRunner.And(string.Format("I insert 3 workstation entities using {0} methods", methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 101
 testRunner.And(string.Format("I query for the count of all the workstation entities combined with the employee " +
                            "entities using {0} methods", methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 102
 testRunner.Then(string.Format("the result of the last query count should be {0}", entityCount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The manual ON clause can be used when relationships and navigation properties are" +
            " not set up in the mapping (build server test)")]
        [NUnit.Framework.CategoryAttribute("AutomaticBuildServerTest")]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "10", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "10", "asynchronous", null)]
        public virtual void TheManualONClauseCanBeUsedWhenRelationshipsAndNavigationPropertiesAreNotSetUpInTheMappingBuildServerTest(string databaseType, string entityCount, string methodType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "AutomaticBuildServerTest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("database type", databaseType);
            argumentsOfScenario.Add("entity count", entityCount);
            argumentsOfScenario.Add("method type", methodType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The manual ON clause can be used when relationships and navigation properties are" +
                    " not set up in the mapping (build server test)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 111
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 112
 testRunner.Given(string.Format("I have initialized a {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 113
 testRunner.When(string.Format("I insert {0} workstation entities using {1} methods", entityCount, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 114
 testRunner.And(string.Format("I insert {0} employee entities parented to existing workstation entities using {1" +
                            "} methods", entityCount, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 115
 testRunner.And(string.Format("I insert 3 workstation entities using {0} methods", methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 116
 testRunner.And(string.Format("I query for the count of all the workstation entities combined with the employee " +
                            "entities when no relationships or navigation properties are set up using {0} met" +
                            "hods", methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 117
 testRunner.Then(string.Format("the result of the last query count should be {0}", entityCount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The manual ON clause can be used when relationships and navigation properties are" +
            " not set up in the mapping (external database)")]
        [NUnit.Framework.CategoryAttribute("ExternalDatabase")]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "10", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "10", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "10", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "10", "asynchronous", null)]
        public virtual void TheManualONClauseCanBeUsedWhenRelationshipsAndNavigationPropertiesAreNotSetUpInTheMappingExternalDatabase(string databaseType, string entityCount, string methodType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ExternalDatabase"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("database type", databaseType);
            argumentsOfScenario.Add("entity count", entityCount);
            argumentsOfScenario.Add("method type", methodType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The manual ON clause can be used when relationships and navigation properties are" +
                    " not set up in the mapping (external database)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 124
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 125
 testRunner.Given(string.Format("I have initialized a {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 126
 testRunner.When(string.Format("I insert {0} workstation entities using {1} methods", entityCount, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 127
 testRunner.And(string.Format("I insert {0} employee entities parented to existing workstation entities using {1" +
                            "} methods", entityCount, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 128
 testRunner.And(string.Format("I insert 3 workstation entities using {0} methods", methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 129
 testRunner.And(string.Format("I query for the count of all the workstation entities combined with the employee " +
                            "entities when no relationships or navigation properties are set up using {0} met" +
                            "hods", methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 130
 testRunner.Then(string.Format("the result of the last query count should be {0}", entityCount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A custom join can be used even for navigation properties (build server test)")]
        [NUnit.Framework.CategoryAttribute("AutomaticBuildServerTest")]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "10", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "10", "asynchronous", null)]
        public virtual void ACustomJoinCanBeUsedEvenForNavigationPropertiesBuildServerTest(string databaseType, string entityCount, string methodType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "AutomaticBuildServerTest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("database type", databaseType);
            argumentsOfScenario.Add("entity count", entityCount);
            argumentsOfScenario.Add("method type", methodType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A custom join can be used even for navigation properties (build server test)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 139
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 140
 testRunner.Given(string.Format("I have initialized a {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 141
 testRunner.When(string.Format("I insert {0} workstation entities using {1} methods", entityCount, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 142
 testRunner.And(string.Format("I insert {0} employee entities parented to existing workstation entities using {1" +
                            "} methods", entityCount, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 143
 testRunner.And(string.Format("I query for all the employee entities combined with the workstation entities when" +
                            " no relationships or navigation properties are set up using {0} methods", methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 144
 testRunner.Then("the queried employee entities should be the same as the inserted ones", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A custom join can be used even for navigation properties (external database)")]
        [NUnit.Framework.CategoryAttribute("ExternalDatabase")]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "10", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "10", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "10", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "10", "asynchronous", null)]
        public virtual void ACustomJoinCanBeUsedEvenForNavigationPropertiesExternalDatabase(string databaseType, string entityCount, string methodType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ExternalDatabase"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("database type", databaseType);
            argumentsOfScenario.Add("entity count", entityCount);
            argumentsOfScenario.Add("method type", methodType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A custom join can be used even for navigation properties (external database)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 151
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 152
 testRunner.Given(string.Format("I have initialized a {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 153
 testRunner.When(string.Format("I insert {0} workstation entities using {1} methods", entityCount, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 154
 testRunner.And(string.Format("I insert {0} employee entities parented to existing workstation entities using {1" +
                            "} methods", entityCount, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 155
 testRunner.And(string.Format("I query for all the employee entities combined with the workstation entities when" +
                            " no relationships or navigation properties are set up using {0} methods", methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 156
 testRunner.Then("the queried employee entities should be the same as the inserted ones", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Query single relationship children with parents (build server test)")]
        [NUnit.Framework.CategoryAttribute("AutomaticBuildServerTest")]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "10", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "10", "asynchronous", null)]
        public virtual void QuerySingleRelationshipChildrenWithParentsBuildServerTest(string databaseType, string entityCount, string methodType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "AutomaticBuildServerTest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("database type", databaseType);
            argumentsOfScenario.Add("entity count", entityCount);
            argumentsOfScenario.Add("method type", methodType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Query single relationship children with parents (build server test)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 165
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 166
 testRunner.Given(string.Format("I have initialized a {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 167
 testRunner.When(string.Format("I insert {0} workstation entities using {1} methods", entityCount, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 168
 testRunner.And(string.Format("I insert {0} employee entities parented to existing workstation entities using {1" +
                            "} methods", entityCount, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 169
 testRunner.And(string.Format("I query for all the employee entities combined with the workstation entities usin" +
                            "g {0} methods", methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 170
 testRunner.Then("the queried employee entities should be the same as the inserted ones", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Query single relationship children with parents (external database)")]
        [NUnit.Framework.CategoryAttribute("ExternalDatabase")]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "10", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "10", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "10", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "10", "asynchronous", null)]
        public virtual void QuerySingleRelationshipChildrenWithParentsExternalDatabase(string databaseType, string entityCount, string methodType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ExternalDatabase"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("database type", databaseType);
            argumentsOfScenario.Add("entity count", entityCount);
            argumentsOfScenario.Add("method type", methodType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Query single relationship children with parents (external database)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 177
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 178
 testRunner.Given(string.Format("I have initialized a {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 179
 testRunner.When(string.Format("I insert {0} workstation entities using {1} methods", entityCount, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 180
 testRunner.And(string.Format("I insert {0} employee entities parented to existing workstation entities using {1" +
                            "} methods", entityCount, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 181
 testRunner.And(string.Format("I query for all the employee entities combined with the workstation entities usin" +
                            "g {0} methods", methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 182
 testRunner.Then("the queried employee entities should be the same as the inserted ones", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Query single relationship children with no parents (build server test)")]
        [NUnit.Framework.CategoryAttribute("AutomaticBuildServerTest")]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "10", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "10", "asynchronous", null)]
        public virtual void QuerySingleRelationshipChildrenWithNoParentsBuildServerTest(string databaseType, string entityCount, string methodType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "AutomaticBuildServerTest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("database type", databaseType);
            argumentsOfScenario.Add("entity count", entityCount);
            argumentsOfScenario.Add("method type", methodType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Query single relationship children with no parents (build server test)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 191
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 192
 testRunner.Given(string.Format("I have initialized a {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 193
 testRunner.When(string.Format("I insert {0} employee entities using {1} methods", entityCount, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 194
 testRunner.And(string.Format("I query for all the employee entities combined with the workstation entities usin" +
                            "g {0} methods", methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 195
 testRunner.Then("the queried employee entities should be the same as the inserted ones", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Query single relationship children with no parents (external database)")]
        [NUnit.Framework.CategoryAttribute("ExternalDatabase")]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "10", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "10", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "10", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "10", "asynchronous", null)]
        public virtual void QuerySingleRelationshipChildrenWithNoParentsExternalDatabase(string databaseType, string entityCount, string methodType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ExternalDatabase"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("database type", databaseType);
            argumentsOfScenario.Add("entity count", entityCount);
            argumentsOfScenario.Add("method type", methodType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Query single relationship children with no parents (external database)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 202
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 203
 testRunner.Given(string.Format("I have initialized a {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 204
 testRunner.When(string.Format("I insert {0} employee entities using {1} methods", entityCount, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 205
 testRunner.And(string.Format("I query for all the employee entities combined with the workstation entities usin" +
                            "g {0} methods", methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 206
 testRunner.Then("the queried employee entities should be the same as the inserted ones", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Query single relationship parents with no children (build server test)")]
        [NUnit.Framework.CategoryAttribute("AutomaticBuildServerTest")]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "10", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "10", "asynchronous", null)]
        public virtual void QuerySingleRelationshipParentsWithNoChildrenBuildServerTest(string databaseType, string entityCount, string methodType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "AutomaticBuildServerTest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("database type", databaseType);
            argumentsOfScenario.Add("entity count", entityCount);
            argumentsOfScenario.Add("method type", methodType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Query single relationship parents with no children (build server test)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 215
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 216
 testRunner.Given(string.Format("I have initialized a {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 217
 testRunner.When(string.Format("I insert {0} workstation entities using {1} methods", entityCount, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 218
 testRunner.And(string.Format("I query for all the workstation entities combined with the employee entities usin" +
                            "g {0} methods", methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 219
 testRunner.Then("the queried workstation entities should be the same as the inserted ones", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Query single relationship parents with no children (external database)")]
        [NUnit.Framework.CategoryAttribute("ExternalDatabase")]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "10", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "10", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "10", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "10", "asynchronous", null)]
        public virtual void QuerySingleRelationshipParentsWithNoChildrenExternalDatabase(string databaseType, string entityCount, string methodType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ExternalDatabase"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("database type", databaseType);
            argumentsOfScenario.Add("entity count", entityCount);
            argumentsOfScenario.Add("method type", methodType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Query single relationship parents with no children (external database)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 226
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 227
 testRunner.Given(string.Format("I have initialized a {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 228
 testRunner.When(string.Format("I insert {0} workstation entities using {1} methods", entityCount, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 229
 testRunner.And(string.Format("I query for all the workstation entities combined with the employee entities usin" +
                            "g {0} methods", methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 230
 testRunner.Then("the queried workstation entities should be the same as the inserted ones", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Query two level relationship grandparents with parents and children (build server" +
            " test)")]
        [NUnit.Framework.CategoryAttribute("AutomaticBuildServerTest")]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "10", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "10", "asynchronous", null)]
        public virtual void QueryTwoLevelRelationshipGrandparentsWithParentsAndChildrenBuildServerTest(string databaseType, string entityCount, string methodType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "AutomaticBuildServerTest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("database type", databaseType);
            argumentsOfScenario.Add("entity count", entityCount);
            argumentsOfScenario.Add("method type", methodType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Query two level relationship grandparents with parents and children (build server" +
                    " test)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 239
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 240
 testRunner.Given(string.Format("I have initialized a {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 241
 testRunner.When(string.Format("I insert {0} building entities using {1} methods", entityCount, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 242
 testRunner.And(string.Format("I insert {0} workstation entities parented to existing building entities using {1" +
                            "} methods", entityCount, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 243
 testRunner.And(string.Format("I insert {0} employee entities parented to existing workstation entities using {1" +
                            "} methods", entityCount, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 244
 testRunner.And(string.Format("I query for all the building entities combined with workstation and employee enti" +
                            "ties using {0} methods", methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 245
 testRunner.Then("the queried building entities should be the same as the inserted ones", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Query two level relationship grandparents with parents and children (external dat" +
            "abase)")]
        [NUnit.Framework.CategoryAttribute("ExternalDatabase")]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "10", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "10", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "10", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "10", "asynchronous", null)]
        public virtual void QueryTwoLevelRelationshipGrandparentsWithParentsAndChildrenExternalDatabase(string databaseType, string entityCount, string methodType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ExternalDatabase"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("database type", databaseType);
            argumentsOfScenario.Add("entity count", entityCount);
            argumentsOfScenario.Add("method type", methodType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Query two level relationship grandparents with parents and children (external dat" +
                    "abase)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 252
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 253
 testRunner.Given(string.Format("I have initialized a {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 254
 testRunner.When(string.Format("I insert {0} building entities using {1} methods", entityCount, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 255
 testRunner.And(string.Format("I insert {0} workstation entities parented to existing building entities using {1" +
                            "} methods", entityCount, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 256
 testRunner.And(string.Format("I insert {0} employee entities parented to existing workstation entities using {1" +
                            "} methods", entityCount, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 257
 testRunner.And(string.Format("I query for all the building entities combined with workstation and employee enti" +
                            "ties using {0} methods", methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 258
 testRunner.Then("the queried building entities should be the same as the inserted ones", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Query two level relationship children with parents and grandparents (build server" +
            " test)")]
        [NUnit.Framework.CategoryAttribute("AutomaticBuildServerTest")]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "10", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "10", "asynchronous", null)]
        public virtual void QueryTwoLevelRelationshipChildrenWithParentsAndGrandparentsBuildServerTest(string databaseType, string entityCount, string methodType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "AutomaticBuildServerTest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("database type", databaseType);
            argumentsOfScenario.Add("entity count", entityCount);
            argumentsOfScenario.Add("method type", methodType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Query two level relationship children with parents and grandparents (build server" +
                    " test)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 267
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 268
 testRunner.Given(string.Format("I have initialized a {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 269
 testRunner.When(string.Format("I insert {0} building entities using {1} methods", entityCount, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 270
 testRunner.And(string.Format("I insert {0} workstation entities parented to existing building entities using {1" +
                            "} methods", entityCount, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 271
 testRunner.And(string.Format("I insert {0} employee entities parented to existing workstation entities using {1" +
                            "} methods", entityCount, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 272
 testRunner.And(string.Format("I query for all the employee entities combined with workstation and building enti" +
                            "ties using {0} methods", methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 273
 testRunner.Then("the queried employee entities should be the same as the inserted ones", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Query two level relationship children with parents and grandparents (external dat" +
            "abase)")]
        [NUnit.Framework.CategoryAttribute("ExternalDatabase")]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "10", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "10", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "10", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "10", "asynchronous", null)]
        public virtual void QueryTwoLevelRelationshipChildrenWithParentsAndGrandparentsExternalDatabase(string databaseType, string entityCount, string methodType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ExternalDatabase"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("database type", databaseType);
            argumentsOfScenario.Add("entity count", entityCount);
            argumentsOfScenario.Add("method type", methodType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Query two level relationship children with parents and grandparents (external dat" +
                    "abase)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 280
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 281
 testRunner.Given(string.Format("I have initialized a {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 282
 testRunner.When(string.Format("I insert {0} building entities using {1} methods", entityCount, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 283
 testRunner.And(string.Format("I insert {0} workstation entities parented to existing building entities using {1" +
                            "} methods", entityCount, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 284
 testRunner.And(string.Format("I insert {0} employee entities parented to existing workstation entities using {1" +
                            "} methods", entityCount, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 285
 testRunner.And(string.Format("I query for all the employee entities combined with workstation and building enti" +
                            "ties using {0} methods", methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 286
 testRunner.Then("the queried employee entities should be the same as the inserted ones", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Query two relationships back to the same entity (build server test)")]
        [NUnit.Framework.CategoryAttribute("AutomaticBuildServerTest")]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "3", "2", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "10", "5", "asynchronous", null)]
        public virtual void QueryTwoRelationshipsBackToTheSameEntityBuildServerTest(string databaseType, string referencedEntityCount, string referencingEntityCount, string methodType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "AutomaticBuildServerTest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("database type", databaseType);
            argumentsOfScenario.Add("referenced entity count", referencedEntityCount);
            argumentsOfScenario.Add("referencing entity count", referencingEntityCount);
            argumentsOfScenario.Add("method type", methodType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Query two relationships back to the same entity (build server test)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 295
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 296
 testRunner.Given(string.Format("I have initialized a {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 297
 testRunner.When(string.Format("I insert {0} employee entities using {1} methods", referencedEntityCount, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 298
 testRunner.And(string.Format("I insert {0} employee entities as children of promoted manager and supervisor emp" +
                            "loyee entities using {1} methods", referencingEntityCount, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 299
 testRunner.And(string.Format("I query for all the employee entities combined with themselves as managers and su" +
                            "pervisors using {0} methods", methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 300
 testRunner.Then("the queried employee entities should be the same as the inserted ones", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Query two relationships back to the same entity (external database)")]
        [NUnit.Framework.CategoryAttribute("ExternalDatabase")]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "5", "3", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "5", "3", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "5", "3", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "5", "3", "asynchronous", null)]
        public virtual void QueryTwoRelationshipsBackToTheSameEntityExternalDatabase(string databaseType, string referencedEntityCount, string referencingEntityCount, string methodType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ExternalDatabase"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("database type", databaseType);
            argumentsOfScenario.Add("referenced entity count", referencedEntityCount);
            argumentsOfScenario.Add("referencing entity count", referencingEntityCount);
            argumentsOfScenario.Add("method type", methodType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Query two relationships back to the same entity (external database)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 307
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 308
 testRunner.Given(string.Format("I have initialized a {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 309
 testRunner.When(string.Format("I insert {0} employee entities using {1} methods", referencedEntityCount, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 310
 testRunner.And(string.Format("I insert {0} employee entities as children of promoted manager and supervisor emp" +
                            "loyee entities using {1} methods", referencingEntityCount, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 311
 testRunner.And(string.Format("I query for all the employee entities combined with themselves as managers and su" +
                            "pervisors using {0} methods", methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 312
 testRunner.Then("the queried employee entities should be the same as the inserted ones", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Query a subset of entities having two relationships back to the same entity (buil" +
            "d server test)")]
        [NUnit.Framework.CategoryAttribute("AutomaticBuildServerTest")]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "10", "5", "11", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "10", "7", "13", "asynchronous", null)]
        public virtual void QueryASubsetOfEntitiesHavingTwoRelationshipsBackToTheSameEntityBuildServerTest(string databaseType, string referencedEntityCount, string referencingEntityCount, string queryCount, string methodType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "AutomaticBuildServerTest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("database type", databaseType);
            argumentsOfScenario.Add("referenced entity count", referencedEntityCount);
            argumentsOfScenario.Add("referencing entity count", referencingEntityCount);
            argumentsOfScenario.Add("query count", queryCount);
            argumentsOfScenario.Add("method type", methodType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Query a subset of entities having two relationships back to the same entity (buil" +
                    "d server test)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 321
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 322
 testRunner.Given(string.Format("I have initialized a {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 323
 testRunner.When(string.Format("I insert {0} employee entities using {1} methods", referencedEntityCount, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 324
 testRunner.And(string.Format("I insert {0} employee entities as children of promoted manager and supervisor emp" +
                            "loyee entities using {1} methods", referencingEntityCount, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 325
 testRunner.And(string.Format("I query for the last {0} inserted employee entities combined with themselves as m" +
                            "anagers and supervisors using {1} methods", queryCount, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 326
 testRunner.Then(string.Format("I should have queried {0} employee entities", queryCount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 327
 testRunner.And(string.Format("the queried employee entities should be the same as the last {0} inserted ones", queryCount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Query a subset of entities having two relationships back to the same entity (exte" +
            "rnal database)")]
        [NUnit.Framework.CategoryAttribute("ExternalDatabase")]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "3", "2", "3", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "3", "2", "3", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "20", "10", "12", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "20", "10", "14", "asynchronous", null)]
        public virtual void QueryASubsetOfEntitiesHavingTwoRelationshipsBackToTheSameEntityExternalDatabase(string databaseType, string referencedEntityCount, string referencingEntityCount, string queryCount, string methodType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ExternalDatabase"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("database type", databaseType);
            argumentsOfScenario.Add("referenced entity count", referencedEntityCount);
            argumentsOfScenario.Add("referencing entity count", referencingEntityCount);
            argumentsOfScenario.Add("query count", queryCount);
            argumentsOfScenario.Add("method type", methodType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Query a subset of entities having two relationships back to the same entity (exte" +
                    "rnal database)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 334
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 335
 testRunner.Given(string.Format("I have initialized a {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 336
 testRunner.When(string.Format("I insert {0} employee entities using {1} methods", referencedEntityCount, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 337
 testRunner.And(string.Format("I insert {0} employee entities as children of promoted manager and supervisor emp" +
                            "loyee entities using {1} methods", referencingEntityCount, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 338
 testRunner.And(string.Format("I query for the last {0} inserted employee entities combined with themselves as m" +
                            "anagers and supervisors using {1} methods", queryCount, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 339
 testRunner.Then(string.Format("I should have queried {0} employee entities", queryCount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 340
 testRunner.And(string.Format("the queried employee entities should be the same as the last {0} inserted ones", queryCount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Query two level relationship children with no parents or grandparents (build serv" +
            "er test)")]
        [NUnit.Framework.CategoryAttribute("AutomaticBuildServerTest")]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "10", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "10", "asynchronous", null)]
        public virtual void QueryTwoLevelRelationshipChildrenWithNoParentsOrGrandparentsBuildServerTest(string databaseType, string entityCount, string methodType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "AutomaticBuildServerTest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("database type", databaseType);
            argumentsOfScenario.Add("entity count", entityCount);
            argumentsOfScenario.Add("method type", methodType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Query two level relationship children with no parents or grandparents (build serv" +
                    "er test)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 349
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 350
 testRunner.Given(string.Format("I have initialized a {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 351
 testRunner.When(string.Format("I insert {0} employee entities using {1} methods", entityCount, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 352
 testRunner.And(string.Format("I query for all the employee entities combined with workstation and building enti" +
                            "ties using {0} methods", methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 353
 testRunner.Then("the queried employee entities should be the same as the inserted ones", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Query two level relationship children with no parents or grandparents (external d" +
            "atabase)")]
        [NUnit.Framework.CategoryAttribute("ExternalDatabase")]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "10", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "10", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "10", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "10", "asynchronous", null)]
        public virtual void QueryTwoLevelRelationshipChildrenWithNoParentsOrGrandparentsExternalDatabase(string databaseType, string entityCount, string methodType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ExternalDatabase"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("database type", databaseType);
            argumentsOfScenario.Add("entity count", entityCount);
            argumentsOfScenario.Add("method type", methodType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Query two level relationship children with no parents or grandparents (external d" +
                    "atabase)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 360
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 361
 testRunner.Given(string.Format("I have initialized a {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 362
 testRunner.When(string.Format("I insert {0} employee entities using {1} methods", entityCount, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 363
 testRunner.And(string.Format("I query for all the employee entities combined with workstation and building enti" +
                            "ties using {0} methods", methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 364
 testRunner.Then("the queried employee entities should be the same as the inserted ones", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Count two level relationship children with no parents or grandparents (build serv" +
            "er test)")]
        [NUnit.Framework.CategoryAttribute("AutomaticBuildServerTest")]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "10", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("LocalDb", "10", "asynchronous", null)]
        public virtual void CountTwoLevelRelationshipChildrenWithNoParentsOrGrandparentsBuildServerTest(string databaseType, string entityCount, string methodType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "AutomaticBuildServerTest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("database type", databaseType);
            argumentsOfScenario.Add("entity count", entityCount);
            argumentsOfScenario.Add("method type", methodType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Count two level relationship children with no parents or grandparents (build serv" +
                    "er test)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 373
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 374
 testRunner.Given(string.Format("I have initialized a {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 375
 testRunner.When(string.Format("I insert {0} employee entities using {1} methods", entityCount, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 376
 testRunner.And(string.Format("I query for the count of all the employee entities strictly linked to workstation" +
                            " and building entities using {0} methods", methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 377
 testRunner.Then("the result of the last query count should be 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Count two level relationship children with no parents or grandparents (external d" +
            "atabase)")]
        [NUnit.Framework.CategoryAttribute("ExternalDatabase")]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "10", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("PostgreSql", "10", "asynchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "10", "synchronous", null)]
        [NUnit.Framework.TestCaseAttribute("MySql", "10", "asynchronous", null)]
        public virtual void CountTwoLevelRelationshipChildrenWithNoParentsOrGrandparentsExternalDatabase(string databaseType, string entityCount, string methodType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ExternalDatabase"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("database type", databaseType);
            argumentsOfScenario.Add("entity count", entityCount);
            argumentsOfScenario.Add("method type", methodType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Count two level relationship children with no parents or grandparents (external d" +
                    "atabase)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 384
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 385
 testRunner.Given(string.Format("I have initialized a {0} database", databaseType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 386
 testRunner.When(string.Format("I insert {0} employee entities using {1} methods", entityCount, methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 387
 testRunner.And(string.Format("I query for the count of all the employee entities strictly linked to workstation" +
                            " and building entities using {0} methods", methodType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 388
 testRunner.Then("the result of the last query count should be 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
